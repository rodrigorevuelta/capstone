AWSTemplateFormatVersion: 2010-09-09
Description: Microservices Web Pipeline

Parameters:
  GitHubOwner:
    Description: The name of the GitHub repository owner
    Type: String
  GitHubToken:
    Type: String
    Description: GitHub repository OAuth token
    NoEcho: true
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Description: GitHub repository branch
    Default: 'master'
  AppName:
    Type: String
    Description: Application name
  ServiceName:
    Type: String
    Description: Service name.  Lowercase
    Default: 'web'
  Environment:
    Type: String
    Description: Environment
    Default: 'prod'

Resources:

  ##############################
  # ECR Repository
  ##############################
  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AppName}/${ServiceName}/${Environment}"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
              "rules": [
                  {
                      "rulePriority": 1,
                      "description": "Expire images older than 14 days",
                      "selection": {
                          "tagStatus": "untagged",
                          "countType": "sinceImagePushed",
                          "countUnit": "days",
                          "countNumber": 14
                      },
                      "action": {
                          "type": "expire"
                      }
                  }
              ]
          }

  #
  # Bucket used by the pipelines to store artifacts.
  #
  PipelinesBucket:
    Description: The artifact bucket required for inter-stage data exchange
    Type: AWS::S3::Bucket

  #
  # IAM Role needed by the pipelines
  #
  CodePipelineRole:
    Description: The role CodePipeline will assume during pipeline execution
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole

  CodePipelinePolicy:
    Description: Policy for the CodePipeline Role
    DependsOn: CodePipelineRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-pipeline-policy'
      Roles:
        - !Ref CodePipelineRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - '*'
            Resource:
              - '*'

  #
  # IAM role needed by our CodeBuild
  #
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Description: Policy for the codebuild execution
    DependsOn: CodeBuildRole
    Properties:
      PolicyName: !Sub '${AWS::StackName}-codebuild-policy'
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - '*'
            Resource:
              - '*'

  #
  # CodeBuild
  #
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildPolicy
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}"
          - Name: APP
            Value: !Sub "${AppName}-${ServiceName}-${Environment}"
      Name: !Sub '${AppName}-${ServiceName}-code-build-${Environment}'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      TimeoutInMinutes: 10 # must be between 5 minutes and 8 hours

  #
  # Pipelines that create/update the cloudformation stacks within the project
  # Prod environment.
  #
  Pipeline:
    Description: '${AWS::StackName} Pipeline'
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - CodePipelinePolicy
    Properties:
      RestartExecutionOnUpdate: True
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelinesBucket
      Stages:
        - Name: Source
          Actions:
            - Name: CloneRepository
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: GitSource
              Configuration:
                Owner: !Ref GitHubOwner
                Branch: !Ref GitHubBranch
                Repo: !Ref GitHubRepo
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildPushImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: GitSource
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1


Outputs:
  ECRUrl:
    Description: ECR URL
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}"
